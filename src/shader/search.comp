// Copyright 2021 Tatsuyuki Ishi <ishitatsuyuki@gmail.com>
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// https://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

#version 450
#ifdef WAVE64
layout(local_size_x = 64) in;
#else
layout(local_size_x = 32) in;
#endif

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_control_flow_attributes : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_shuffle : require
#extension GL_EXT_buffer_reference : require
#extension GL_AMD_shader_ballot : require

#include "hash.h"
#include "struct.h"
#include "transpose.h"
#include "util.h"

layout(constant_id = 0) const uint dag_size_mix = 1;
layout(push_constant) uniform PushConstants {
    Config conf;
};

layout(set = 0, binding = 0) buffer OutBuf {
    Output out_;
};

// Shuffle scratchpad. The size for the first dimension should be the max `m` parameter used in
// the code (see also transpose.h)
shared uint shuf[8][gl_WorkGroupSize];

void main() {
    // Work distribution (assuming 64 threads in one workgroup for brevity):
    // Step 1: sha3_512(header + nonce[::-1])
    //         Each thread process 1 nonce
    // Step 2: fnv mix (64 iterations)
    //         Partitioned into groups of 8 threads that will do loads on the same cache line
    //         Since it requires 8 threads to process 1 nonce, we iterate over this 8 times to
    //         process all 64 hashes
    // Step 3: sha3_256(s+cmix)
    //         Each thread process 1 nonce
    uint gid = gl_GlobalInvocationID.x;
    uint th_ix = gl_LocalInvocationIndex;

    uvec2 state[25];
    state[0] = conf.g_header[0];
    state[1] = conf.g_header[1];
    state[2] = conf.g_header[2];
    state[3] = conf.g_header[3];
    state[4] = unpackUint2x32(conf.start_nonce + gid);
    state[5] = unpackUint2x32(0x0000000000000001UL);
    state[6] = uvec2(0);
    state[7] = uvec2(0);
    state[8] = unpackUint2x32(0x8000000000000000UL);
    for (int i = 9; i < 25; ++i)
        state[i] = uvec2(0);
    KECCAK_PROCESS(state, 5, 8);
    uint mix[8][4]; // see layout diagram below
    for (int j = 0; j < 2; j++) {
        for (int i = 0; i < 8; i += 2) {
            C2R_SCATTER(shuf, 4, 32, i/2, th_ix, state[i+j].x);
        }
        barrier();
        for (int t = 0; t < 8; t++) {
            mix[t][j*2] = C2R_GATHER(shuf, 4, 32, t/2, (th_ix & 0x23) | ((th_ix & 0x18) >> 1) | ((t & 1) << 4));
        }
        for (int i = 0; i < 8; i += 2) {
            C2R_SCATTER(shuf, 4, 32, i/2, th_ix, state[i+j].y);
        }
        barrier();
        for (int t = 0; t < 8; t++) {
            mix[t][j*2+1] = C2R_GATHER(shuf, 4, 32, t/2, (th_ix & 0x23) | ((th_ix & 0x18) >> 1) | ((t & 1) << 4));
        }
    }
    uint s0;
    // <--------------- 32 uint --------------->
    // +----------+----------+----------+----------+
    // | hash 0   | hash 1   | hash 2   | hash 3   |
    // | ======== | ======== | ======== | ======== |
    // | 048b048c | 048b048c | 048b048c | 048b048c |
    // | 159c159d | 159c159d | 159c159d | 159c159d |
    // | 26ad261e | 26ad261e | 26ad261e | 26ad261e |
    // | 37bf37bf | 37bf37bf | 37bf37bf | 37bf37bf |
    // +----------+----------+----------+----------+
    // | ...      | ...      | ...      | ...      |
    // +----------+----------+----------+----------+
    // | hash 28  | hash 29  | hash 30  | hash 31  |
    // +----------+----------+----------+----------+

    [[dont_unroll]]
    for (int i_ = 0; i_ < 64; i_ += 4) {
        [[unroll]]
        for (int x = 0; x < 4; x++) {
            uint i = i_ + x;
            uint mix_i;
            uint target_th = (i_ % 32) / 4;
            // Extract the (i % 32) th element from each hash and distribute them into 1 thread : 1 hash.
            // Uses a pretty crazy movement scheme; the idea is mostly based on the "conflict removal" part
            // of "fast transpose", see transpose.h for more reading
            for (int t = 0; t < 8; t++) {
                uint mic = mix[t][x]; // x = i % 4
                uint xored = subgroupShuffleXor(mic, t); // (t, th_ix) -> (t, th_ix ^ t)
                // Optimization detail: DPP output must be the S0 (false branch), so the condition is flipped
                mix_i = ((th_ix ^ target_th) % 8 != t) ? mix_i : xored; // extract (t, target_th ^ t)
            }
            mix_i = subgroupShuffleXor(mix_i, target_th); // target_th ^ t -> t
            if (i == 0) s0 = mix_i;
            uint p = fnv(i ^ s0, mix_i) % dag_size_mix;

#define MIX_INNER(t) {\
            uint p_idx = swizzleInvocationsMaskedAMD(p, uvec3(0x18, t, 0)) * 8 + th_ix % 8; \
            uint new_data[4] = conf.dag_read.values[p_idx]; \
            for (int j = 0; j < 4; j++) { \
                mix[t][j] = fnv(mix[t][j], new_data[j]); \
            } }

            // GL_AMD_shader_ballot requires manual loop unrolling to make the swizzle mask "constant"
            MIX_INNER(0);
            MIX_INNER(1);
            MIX_INNER(2);
            MIX_INNER(3);
            MIX_INNER(4);
            MIX_INNER(5);
            MIX_INNER(6);
            MIX_INNER(7);
        }
    }

    for (int t = 0; t < 8; t++) {
        uint cmix = fnv(fnv(fnv(mix[t][0], mix[t][1]), mix[t][2]), mix[t][3]);
        // <--------------- 32 uint --------------->
        // +---------+---------+---------+---------+
        // | cmix 0  | cmix 1  | cmix 2  | cmix 3  |
        // +---------+---------+---------+---------+
        // | ...     | ...     | ...     | ...     |
        // +---------+---------+---------+---------+
        // | cmix 28 | cmix 29 | cmix 30 | cmix 31 |
        // +---------+---------+---------+---------+
        R2C_SCATTER(shuf, 8, 32, t, th_ix, cmix);
    }

    barrier();

    for (int t = 0; t < 4; t++) {
        state[8+t].x = R2C_GATHER(shuf, 8, 32, t*2, th_ix);
        state[8+t].y = R2C_GATHER(shuf, 8, 32, t*2+1, th_ix);
    }
    state[12] = unpackUint2x32(0x0000000000000001UL);
    state[13] = uvec2(0);
    state[14] = uvec2(0);
    state[15] = uvec2(0);
    state[16] = unpackUint2x32(0x8000000000000000UL);
    for (int i = 17; i < 25; ++i)
        state[i] = uvec2(0);
    KECCAK_PROCESS(state, 12, 1);

    if (packUint2x32(bswap64(state[0])) <= conf.target) {
        uint slot = min(OUTPUT_ENTRY_COUNT - 1u, atomicAdd(out_.output_count, 1));
        out_.outputs[slot].gid = gid;
        for (int t = 0; t < 8; t++) {
            out_.outputs[slot].mix[t] = R2C_GATHER(shuf, 8, 32, t, th_ix);
        }
    }
}

